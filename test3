import cv2
import numpy as np

# Load the face classifier
face_classifier = cv2.CascadeClassifier(
    cv2.data.haarcascades + "haarcascade_frontalface_default.xml"
)

# Capture video from the webcam (change index if needed)
video_capture = cv2.VideoCapture(1)  # Use 0 for the default camera
count = 0

def detect_bounding_box(vid):
    gray_image = cv2.cvtColor(vid, cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray_image, 1.1, 5, minSize=(40, 40))
    for (x, y, w, h) in faces:
        cv2.rectangle(vid, (x, y), (x + w, y + h), (0, 255, 0), 4)
    return faces

while True:
    result, video_frame = video_capture.read()
    if not result:
        break
    
    faces = detect_bounding_box(video_frame)
    
    # Display the video frame with bounding boxes
    cv2.imshow("My Face Detection Project", video_frame)

    # Check if any faces were detected
    if len(faces) > 0:
        for (x, y, w, h) in faces:
            count += 1
            # Crop the face from the frame
            face = video_frame[y:y + h, x:x + w]
            face = cv2.resize(face, (200, 200))
            face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)

            # Save file in specified directory with unique name
            file_name_path = './iCloud Photos/nelson' + str(count) + '.jpg'
            cv2.imwrite(file_name_path, face)

            # Put count on images and display live count
            cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
            cv2.imshow('Face Cropper', face)
        
    else:
        print("Face not found")

    # Break if Enter key is pressed or if 30 samples are collected
    if cv2.waitKey(1) == 13 or count >= 100:
        break

# Release the video capture and close windows
video_capture.release()
cv2.destroyAllWindows()      
print("Collecting Samples Complete")
